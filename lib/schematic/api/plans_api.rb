=begin
#Schematic API

#Schematic API

The version of the OpenAPI document: 0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Schematic
  class PlansApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create plan
    # @param create_plan_request_body [CreatePlanRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [CreatePlanResponse]
    def create_plan(create_plan_request_body, opts = {})
      data, _status_code, _headers = create_plan_with_http_info(create_plan_request_body, opts)
      data
    end

    # Create plan
    # @param create_plan_request_body [CreatePlanRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(CreatePlanResponse, Integer, Hash)>] CreatePlanResponse data, response status code and response headers
    def create_plan_with_http_info(create_plan_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlansApi.create_plan ...'
      end
      # verify the required parameter 'create_plan_request_body' is set
      if @api_client.config.client_side_validation && create_plan_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'create_plan_request_body' when calling PlansApi.create_plan"
      end
      # resource path
      local_var_path = '/plans'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_plan_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreatePlanResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"PlansApi.create_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlansApi#create_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete plan
    # @param plan_id [String] plan_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [DeletePlanResponse]
    def delete_plan(plan_id, opts = {})
      data, _status_code, _headers = delete_plan_with_http_info(plan_id, opts)
      data
    end

    # Delete plan
    # @param plan_id [String] plan_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(DeletePlanResponse, Integer, Hash)>] DeletePlanResponse data, response status code and response headers
    def delete_plan_with_http_info(plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlansApi.delete_plan ...'
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling PlansApi.delete_plan"
      end
      # resource path
      local_var_path = '/plans/{plan_id}'.sub('{' + 'plan_id' + '}', CGI.escape(plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeletePlanResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"PlansApi.delete_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlansApi#delete_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get plan
    # @param plan_id [String] plan_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [GetPlanResponse]
    def get_plan(plan_id, opts = {})
      data, _status_code, _headers = get_plan_with_http_info(plan_id, opts)
      data
    end

    # Get plan
    # @param plan_id [String] plan_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(GetPlanResponse, Integer, Hash)>] GetPlanResponse data, response status code and response headers
    def get_plan_with_http_info(plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlansApi.get_plan ...'
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling PlansApi.get_plan"
      end
      # resource path
      local_var_path = '/plans/{plan_id}'.sub('{' + 'plan_id' + '}', CGI.escape(plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPlanResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"PlansApi.get_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlansApi#get_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List plans
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [ListPlansResponse]
    def list_plans(opts = {})
      data, _status_code, _headers = list_plans_with_http_info(opts)
      data
    end

    # List plans
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [Array<(ListPlansResponse, Integer, Hash)>] ListPlansResponse data, response status code and response headers
    def list_plans_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlansApi.list_plans ...'
      end
      # resource path
      local_var_path = '/plans'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'dir'] = opts[:'dir'] if !opts[:'dir'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListPlansResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"PlansApi.list_plans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlansApi#list_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sync company plans
    # @param sync_company_plans_request_body [SyncCompanyPlansRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [SyncCompanyPlansResponse]
    def sync_company_plans(sync_company_plans_request_body, opts = {})
      data, _status_code, _headers = sync_company_plans_with_http_info(sync_company_plans_request_body, opts)
      data
    end

    # Sync company plans
    # @param sync_company_plans_request_body [SyncCompanyPlansRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(SyncCompanyPlansResponse, Integer, Hash)>] SyncCompanyPlansResponse data, response status code and response headers
    def sync_company_plans_with_http_info(sync_company_plans_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlansApi.sync_company_plans ...'
      end
      # verify the required parameter 'sync_company_plans_request_body' is set
      if @api_client.config.client_side_validation && sync_company_plans_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'sync_company_plans_request_body' when calling PlansApi.sync_company_plans"
      end
      # resource path
      local_var_path = '/company-plans/sync'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(sync_company_plans_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'SyncCompanyPlansResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"PlansApi.sync_company_plans",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlansApi#sync_company_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update plan
    # @param plan_id [String] plan_id
    # @param update_plan_request_body [UpdatePlanRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [UpdatePlanResponse]
    def update_plan(plan_id, update_plan_request_body, opts = {})
      data, _status_code, _headers = update_plan_with_http_info(plan_id, update_plan_request_body, opts)
      data
    end

    # Update plan
    # @param plan_id [String] plan_id
    # @param update_plan_request_body [UpdatePlanRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(UpdatePlanResponse, Integer, Hash)>] UpdatePlanResponse data, response status code and response headers
    def update_plan_with_http_info(plan_id, update_plan_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlansApi.update_plan ...'
      end
      # verify the required parameter 'plan_id' is set
      if @api_client.config.client_side_validation && plan_id.nil?
        fail ArgumentError, "Missing the required parameter 'plan_id' when calling PlansApi.update_plan"
      end
      # verify the required parameter 'update_plan_request_body' is set
      if @api_client.config.client_side_validation && update_plan_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'update_plan_request_body' when calling PlansApi.update_plan"
      end
      # resource path
      local_var_path = '/plans/{plan_id}'.sub('{' + 'plan_id' + '}', CGI.escape(plan_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_plan_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdatePlanResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"PlansApi.update_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlansApi#update_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upsert billing period
    # @param key [String] key
    # @param upsert_billing_period_request_body [UpsertBillingPeriodRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [UpsertBillingPeriodResponse]
    def upsert_billing_period(key, upsert_billing_period_request_body, opts = {})
      data, _status_code, _headers = upsert_billing_period_with_http_info(key, upsert_billing_period_request_body, opts)
      data
    end

    # Upsert billing period
    # @param key [String] key
    # @param upsert_billing_period_request_body [UpsertBillingPeriodRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(UpsertBillingPeriodResponse, Integer, Hash)>] UpsertBillingPeriodResponse data, response status code and response headers
    def upsert_billing_period_with_http_info(key, upsert_billing_period_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlansApi.upsert_billing_period ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling PlansApi.upsert_billing_period"
      end
      # verify the required parameter 'upsert_billing_period_request_body' is set
      if @api_client.config.client_side_validation && upsert_billing_period_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'upsert_billing_period_request_body' when calling PlansApi.upsert_billing_period"
      end
      # resource path
      local_var_path = '/billing-periods/{key}/upsert'.sub('{' + 'key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(upsert_billing_period_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpsertBillingPeriodResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"PlansApi.upsert_billing_period",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlansApi#upsert_billing_period\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
