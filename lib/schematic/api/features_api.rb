=begin
#Schematic API

#Schematic API

The version of the OpenAPI document: 0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Schematic
  class FeaturesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Check flag
    # @param key [String] key
    # @param check_flag_request_body [CheckFlagRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [CheckFlagResponse]
    def check_flag(key, check_flag_request_body, opts = {})
      data, _status_code, _headers = check_flag_with_http_info(key, check_flag_request_body, opts)
      data
    end

    # Check flag
    # @param key [String] key
    # @param check_flag_request_body [CheckFlagRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(CheckFlagResponse, Integer, Hash)>] CheckFlagResponse data, response status code and response headers
    def check_flag_with_http_info(key, check_flag_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.check_flag ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling FeaturesApi.check_flag"
      end
      # verify the required parameter 'check_flag_request_body' is set
      if @api_client.config.client_side_validation && check_flag_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'check_flag_request_body' when calling FeaturesApi.check_flag"
      end
      # resource path
      local_var_path = '/flags/{key}/check'.sub('{' + 'key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(check_flag_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'CheckFlagResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"FeaturesApi.check_flag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#check_flag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check flags
    # @param check_flag_request_body [CheckFlagRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [CheckFlagsResponse]
    def check_flags(check_flag_request_body, opts = {})
      data, _status_code, _headers = check_flags_with_http_info(check_flag_request_body, opts)
      data
    end

    # Check flags
    # @param check_flag_request_body [CheckFlagRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(CheckFlagsResponse, Integer, Hash)>] CheckFlagsResponse data, response status code and response headers
    def check_flags_with_http_info(check_flag_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.check_flags ...'
      end
      # verify the required parameter 'check_flag_request_body' is set
      if @api_client.config.client_side_validation && check_flag_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'check_flag_request_body' when calling FeaturesApi.check_flags"
      end
      # resource path
      local_var_path = '/flags/check'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(check_flag_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'CheckFlagsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"FeaturesApi.check_flags",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#check_flags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Count flag values
    # @param entity_type [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :company_id 
    # @option opts [String] :user_id 
    # @option opts [String] :flag_id 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [CountFlagValuesResponse]
    def count_flag_values(entity_type, opts = {})
      data, _status_code, _headers = count_flag_values_with_http_info(entity_type, opts)
      data
    end

    # Count flag values
    # @param entity_type [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :company_id 
    # @option opts [String] :user_id 
    # @option opts [String] :flag_id 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [Array<(CountFlagValuesResponse, Integer, Hash)>] CountFlagValuesResponse data, response status code and response headers
    def count_flag_values_with_http_info(entity_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.count_flag_values ...'
      end
      # verify the required parameter 'entity_type' is set
      if @api_client.config.client_side_validation && entity_type.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type' when calling FeaturesApi.count_flag_values"
      end
      # resource path
      local_var_path = '/flag-values/count'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'entity_type'] = entity_type
      query_params[:'company_id'] = opts[:'company_id'] if !opts[:'company_id'].nil?
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'flag_id'] = opts[:'flag_id'] if !opts[:'flag_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'dir'] = opts[:'dir'] if !opts[:'dir'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CountFlagValuesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"FeaturesApi.count_flag_values",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#count_flag_values\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create feature
    # @param create_feature_request_body [CreateFeatureRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [CreateFeatureResponse]
    def create_feature(create_feature_request_body, opts = {})
      data, _status_code, _headers = create_feature_with_http_info(create_feature_request_body, opts)
      data
    end

    # Create feature
    # @param create_feature_request_body [CreateFeatureRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(CreateFeatureResponse, Integer, Hash)>] CreateFeatureResponse data, response status code and response headers
    def create_feature_with_http_info(create_feature_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.create_feature ...'
      end
      # verify the required parameter 'create_feature_request_body' is set
      if @api_client.config.client_side_validation && create_feature_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'create_feature_request_body' when calling FeaturesApi.create_feature"
      end
      # resource path
      local_var_path = '/features'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_feature_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateFeatureResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"FeaturesApi.create_feature",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#create_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create flag
    # @param create_flag_request_body [CreateFlagRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [CreateFlagResponse]
    def create_flag(create_flag_request_body, opts = {})
      data, _status_code, _headers = create_flag_with_http_info(create_flag_request_body, opts)
      data
    end

    # Create flag
    # @param create_flag_request_body [CreateFlagRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(CreateFlagResponse, Integer, Hash)>] CreateFlagResponse data, response status code and response headers
    def create_flag_with_http_info(create_flag_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.create_flag ...'
      end
      # verify the required parameter 'create_flag_request_body' is set
      if @api_client.config.client_side_validation && create_flag_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'create_flag_request_body' when calling FeaturesApi.create_flag"
      end
      # resource path
      local_var_path = '/flags'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_flag_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateFlagResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"FeaturesApi.create_flag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#create_flag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create rule
    # @param create_rule_request_body [CreateRuleRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [CreateRuleResponse]
    def create_rule(create_rule_request_body, opts = {})
      data, _status_code, _headers = create_rule_with_http_info(create_rule_request_body, opts)
      data
    end

    # Create rule
    # @param create_rule_request_body [CreateRuleRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(CreateRuleResponse, Integer, Hash)>] CreateRuleResponse data, response status code and response headers
    def create_rule_with_http_info(create_rule_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.create_rule ...'
      end
      # verify the required parameter 'create_rule_request_body' is set
      if @api_client.config.client_side_validation && create_rule_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'create_rule_request_body' when calling FeaturesApi.create_rule"
      end
      # resource path
      local_var_path = '/rules'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_rule_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateRuleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"FeaturesApi.create_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#create_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete feature
    # @param feature_id [String] feature_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [DeleteFeatureResponse]
    def delete_feature(feature_id, opts = {})
      data, _status_code, _headers = delete_feature_with_http_info(feature_id, opts)
      data
    end

    # Delete feature
    # @param feature_id [String] feature_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(DeleteFeatureResponse, Integer, Hash)>] DeleteFeatureResponse data, response status code and response headers
    def delete_feature_with_http_info(feature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.delete_feature ...'
      end
      # verify the required parameter 'feature_id' is set
      if @api_client.config.client_side_validation && feature_id.nil?
        fail ArgumentError, "Missing the required parameter 'feature_id' when calling FeaturesApi.delete_feature"
      end
      # resource path
      local_var_path = '/features/{feature_id}'.sub('{' + 'feature_id' + '}', CGI.escape(feature_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteFeatureResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"FeaturesApi.delete_feature",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#delete_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete flag
    # @param flag_id [String] flag_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [DeleteFlagResponse]
    def delete_flag(flag_id, opts = {})
      data, _status_code, _headers = delete_flag_with_http_info(flag_id, opts)
      data
    end

    # Delete flag
    # @param flag_id [String] flag_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(DeleteFlagResponse, Integer, Hash)>] DeleteFlagResponse data, response status code and response headers
    def delete_flag_with_http_info(flag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.delete_flag ...'
      end
      # verify the required parameter 'flag_id' is set
      if @api_client.config.client_side_validation && flag_id.nil?
        fail ArgumentError, "Missing the required parameter 'flag_id' when calling FeaturesApi.delete_flag"
      end
      # resource path
      local_var_path = '/flags/{flag_id}'.sub('{' + 'flag_id' + '}', CGI.escape(flag_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteFlagResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"FeaturesApi.delete_flag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#delete_flag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get feature
    # @param feature_id [String] feature_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [GetFeatureResponse]
    def get_feature(feature_id, opts = {})
      data, _status_code, _headers = get_feature_with_http_info(feature_id, opts)
      data
    end

    # Get feature
    # @param feature_id [String] feature_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(GetFeatureResponse, Integer, Hash)>] GetFeatureResponse data, response status code and response headers
    def get_feature_with_http_info(feature_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.get_feature ...'
      end
      # verify the required parameter 'feature_id' is set
      if @api_client.config.client_side_validation && feature_id.nil?
        fail ArgumentError, "Missing the required parameter 'feature_id' when calling FeaturesApi.get_feature"
      end
      # resource path
      local_var_path = '/features/{feature_id}'.sub('{' + 'feature_id' + '}', CGI.escape(feature_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetFeatureResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"FeaturesApi.get_feature",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#get_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get flag
    # @param flag_id [String] flag_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [GetFlagResponse]
    def get_flag(flag_id, opts = {})
      data, _status_code, _headers = get_flag_with_http_info(flag_id, opts)
      data
    end

    # Get flag
    # @param flag_id [String] flag_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(GetFlagResponse, Integer, Hash)>] GetFlagResponse data, response status code and response headers
    def get_flag_with_http_info(flag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.get_flag ...'
      end
      # verify the required parameter 'flag_id' is set
      if @api_client.config.client_side_validation && flag_id.nil?
        fail ArgumentError, "Missing the required parameter 'flag_id' when calling FeaturesApi.get_flag"
      end
      # resource path
      local_var_path = '/flags/{flag_id}'.sub('{' + 'flag_id' + '}', CGI.escape(flag_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetFlagResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"FeaturesApi.get_flag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#get_flag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get rule
    # @param rule_id [String] rule_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [GetRuleResponse]
    def get_rule(rule_id, opts = {})
      data, _status_code, _headers = get_rule_with_http_info(rule_id, opts)
      data
    end

    # Get rule
    # @param rule_id [String] rule_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(GetRuleResponse, Integer, Hash)>] GetRuleResponse data, response status code and response headers
    def get_rule_with_http_info(rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.get_rule ...'
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling FeaturesApi.get_rule"
      end
      # resource path
      local_var_path = '/rules/{rule_id}'.sub('{' + 'rule_id' + '}', CGI.escape(rule_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRuleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"FeaturesApi.get_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#get_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Latest flag checks
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :flag_id 
    # @option opts [Array<String>] :flag_ids 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [LatestFlagChecksResponse]
    def latest_flag_checks(opts = {})
      data, _status_code, _headers = latest_flag_checks_with_http_info(opts)
      data
    end

    # Latest flag checks
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :flag_id 
    # @option opts [Array<String>] :flag_ids 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [Array<(LatestFlagChecksResponse, Integer, Hash)>] LatestFlagChecksResponse data, response status code and response headers
    def latest_flag_checks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.latest_flag_checks ...'
      end
      # resource path
      local_var_path = '/flag-checks/latest'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'flag_id'] = opts[:'flag_id'] if !opts[:'flag_id'].nil?
      query_params[:'flag_ids'] = @api_client.build_collection_param(opts[:'flag_ids'], :multi) if !opts[:'flag_ids'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'dir'] = opts[:'dir'] if !opts[:'dir'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LatestFlagChecksResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"FeaturesApi.latest_flag_checks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#latest_flag_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List features
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [ListFeaturesResponse]
    def list_features(opts = {})
      data, _status_code, _headers = list_features_with_http_info(opts)
      data
    end

    # List features
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [Array<(ListFeaturesResponse, Integer, Hash)>] ListFeaturesResponse data, response status code and response headers
    def list_features_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.list_features ...'
      end
      # resource path
      local_var_path = '/features'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'dir'] = opts[:'dir'] if !opts[:'dir'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListFeaturesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"FeaturesApi.list_features",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#list_features\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List flag checks
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :flag_id 
    # @option opts [Array<String>] :flag_ids 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [ListFlagChecksResponse]
    def list_flag_checks(opts = {})
      data, _status_code, _headers = list_flag_checks_with_http_info(opts)
      data
    end

    # List flag checks
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :flag_id 
    # @option opts [Array<String>] :flag_ids 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [Array<(ListFlagChecksResponse, Integer, Hash)>] ListFlagChecksResponse data, response status code and response headers
    def list_flag_checks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.list_flag_checks ...'
      end
      # resource path
      local_var_path = '/flag-checks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'flag_id'] = opts[:'flag_id'] if !opts[:'flag_id'].nil?
      query_params[:'flag_ids'] = @api_client.build_collection_param(opts[:'flag_ids'], :multi) if !opts[:'flag_ids'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'dir'] = opts[:'dir'] if !opts[:'dir'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListFlagChecksResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"FeaturesApi.list_flag_checks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#list_flag_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List flag values
    # @param entity_type [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :company_id 
    # @option opts [String] :user_id 
    # @option opts [String] :flag_id 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [ListFlagValuesResponse]
    def list_flag_values(entity_type, opts = {})
      data, _status_code, _headers = list_flag_values_with_http_info(entity_type, opts)
      data
    end

    # List flag values
    # @param entity_type [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :company_id 
    # @option opts [String] :user_id 
    # @option opts [String] :flag_id 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [Array<(ListFlagValuesResponse, Integer, Hash)>] ListFlagValuesResponse data, response status code and response headers
    def list_flag_values_with_http_info(entity_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.list_flag_values ...'
      end
      # verify the required parameter 'entity_type' is set
      if @api_client.config.client_side_validation && entity_type.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type' when calling FeaturesApi.list_flag_values"
      end
      # resource path
      local_var_path = '/flag-values'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'entity_type'] = entity_type
      query_params[:'company_id'] = opts[:'company_id'] if !opts[:'company_id'].nil?
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'flag_id'] = opts[:'flag_id'] if !opts[:'flag_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'dir'] = opts[:'dir'] if !opts[:'dir'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListFlagValuesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"FeaturesApi.list_flag_values",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#list_flag_values\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List flags
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :feature_id 
    # @option opts [Array<String>] :flag_ids 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [ListFlagsResponse]
    def list_flags(opts = {})
      data, _status_code, _headers = list_flags_with_http_info(opts)
      data
    end

    # List flags
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :feature_id 
    # @option opts [Array<String>] :flag_ids 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [Array<(ListFlagsResponse, Integer, Hash)>] ListFlagsResponse data, response status code and response headers
    def list_flags_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.list_flags ...'
      end
      # resource path
      local_var_path = '/flags'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'feature_id'] = opts[:'feature_id'] if !opts[:'feature_id'].nil?
      query_params[:'flag_ids'] = @api_client.build_collection_param(opts[:'flag_ids'], :multi) if !opts[:'flag_ids'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'dir'] = opts[:'dir'] if !opts[:'dir'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListFlagsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"FeaturesApi.list_flags",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#list_flags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update feature
    # @param feature_id [String] feature_id
    # @param update_feature_request_body [UpdateFeatureRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [UpdateFeatureResponse]
    def update_feature(feature_id, update_feature_request_body, opts = {})
      data, _status_code, _headers = update_feature_with_http_info(feature_id, update_feature_request_body, opts)
      data
    end

    # Update feature
    # @param feature_id [String] feature_id
    # @param update_feature_request_body [UpdateFeatureRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(UpdateFeatureResponse, Integer, Hash)>] UpdateFeatureResponse data, response status code and response headers
    def update_feature_with_http_info(feature_id, update_feature_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.update_feature ...'
      end
      # verify the required parameter 'feature_id' is set
      if @api_client.config.client_side_validation && feature_id.nil?
        fail ArgumentError, "Missing the required parameter 'feature_id' when calling FeaturesApi.update_feature"
      end
      # verify the required parameter 'update_feature_request_body' is set
      if @api_client.config.client_side_validation && update_feature_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'update_feature_request_body' when calling FeaturesApi.update_feature"
      end
      # resource path
      local_var_path = '/features/{feature_id}'.sub('{' + 'feature_id' + '}', CGI.escape(feature_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_feature_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateFeatureResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"FeaturesApi.update_feature",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#update_feature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update flag
    # @param flag_id [String] flag_id
    # @param create_flag_request_body [CreateFlagRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [UpdateFlagResponse]
    def update_flag(flag_id, create_flag_request_body, opts = {})
      data, _status_code, _headers = update_flag_with_http_info(flag_id, create_flag_request_body, opts)
      data
    end

    # Update flag
    # @param flag_id [String] flag_id
    # @param create_flag_request_body [CreateFlagRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(UpdateFlagResponse, Integer, Hash)>] UpdateFlagResponse data, response status code and response headers
    def update_flag_with_http_info(flag_id, create_flag_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.update_flag ...'
      end
      # verify the required parameter 'flag_id' is set
      if @api_client.config.client_side_validation && flag_id.nil?
        fail ArgumentError, "Missing the required parameter 'flag_id' when calling FeaturesApi.update_flag"
      end
      # verify the required parameter 'create_flag_request_body' is set
      if @api_client.config.client_side_validation && create_flag_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'create_flag_request_body' when calling FeaturesApi.update_flag"
      end
      # resource path
      local_var_path = '/flags/{flag_id}'.sub('{' + 'flag_id' + '}', CGI.escape(flag_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_flag_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateFlagResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"FeaturesApi.update_flag",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#update_flag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update rule
    # @param rule_id [String] rule_id
    # @param update_rule_request_body [UpdateRuleRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [UpdateRuleResponse]
    def update_rule(rule_id, update_rule_request_body, opts = {})
      data, _status_code, _headers = update_rule_with_http_info(rule_id, update_rule_request_body, opts)
      data
    end

    # Update rule
    # @param rule_id [String] rule_id
    # @param update_rule_request_body [UpdateRuleRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(UpdateRuleResponse, Integer, Hash)>] UpdateRuleResponse data, response status code and response headers
    def update_rule_with_http_info(rule_id, update_rule_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FeaturesApi.update_rule ...'
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling FeaturesApi.update_rule"
      end
      # verify the required parameter 'update_rule_request_body' is set
      if @api_client.config.client_side_validation && update_rule_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'update_rule_request_body' when calling FeaturesApi.update_rule"
      end
      # resource path
      local_var_path = '/rules/{rule_id}'.sub('{' + 'rule_id' + '}', CGI.escape(rule_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_rule_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateRuleResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"FeaturesApi.update_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FeaturesApi#update_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
