=begin
#Schematic API

#Schematic API

The version of the OpenAPI document: 0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Schematic
  class AccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Count api keys
    # @param require_environment [Boolean] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :environment_id 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @return [CountApiKeysResponse]
    def count_api_keys(require_environment, opts = {})
      data, _status_code, _headers = count_api_keys_with_http_info(require_environment, opts)
      data
    end

    # Count api keys
    # @param require_environment [Boolean] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :environment_id 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @return [Array<(CountApiKeysResponse, Integer, Hash)>] CountApiKeysResponse data, response status code and response headers
    def count_api_keys_with_http_info(require_environment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.count_api_keys ...'
      end
      # verify the required parameter 'require_environment' is set
      if @api_client.config.client_side_validation && require_environment.nil?
        fail ArgumentError, "Missing the required parameter 'require_environment' when calling AccountsApi.count_api_keys"
      end
      # resource path
      local_var_path = '/api-keys/count'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'require_environment'] = require_environment
      query_params[:'environment_id'] = opts[:'environment_id'] if !opts[:'environment_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CountApiKeysResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.count_api_keys",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#count_api_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Count api requests
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :q 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @return [CountApiRequestsResponse]
    def count_api_requests(opts = {})
      data, _status_code, _headers = count_api_requests_with_http_info(opts)
      data
    end

    # Count api requests
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :q 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @return [Array<(CountApiRequestsResponse, Integer, Hash)>] CountApiRequestsResponse data, response status code and response headers
    def count_api_requests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.count_api_requests ...'
      end
      # resource path
      local_var_path = '/api-requests/count'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CountApiRequestsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.count_api_requests",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#count_api_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create api key
    # @param create_api_key_request_body [CreateApiKeyRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [CreateApiKeyResponse]
    def create_api_key(create_api_key_request_body, opts = {})
      data, _status_code, _headers = create_api_key_with_http_info(create_api_key_request_body, opts)
      data
    end

    # Create api key
    # @param create_api_key_request_body [CreateApiKeyRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(CreateApiKeyResponse, Integer, Hash)>] CreateApiKeyResponse data, response status code and response headers
    def create_api_key_with_http_info(create_api_key_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.create_api_key ...'
      end
      # verify the required parameter 'create_api_key_request_body' is set
      if @api_client.config.client_side_validation && create_api_key_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'create_api_key_request_body' when calling AccountsApi.create_api_key"
      end
      # resource path
      local_var_path = '/api-keys'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_api_key_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateApiKeyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.create_api_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#create_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create environment
    # @param create_environment_request_body [CreateEnvironmentRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [CreateEnvironmentResponse]
    def create_environment(create_environment_request_body, opts = {})
      data, _status_code, _headers = create_environment_with_http_info(create_environment_request_body, opts)
      data
    end

    # Create environment
    # @param create_environment_request_body [CreateEnvironmentRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(CreateEnvironmentResponse, Integer, Hash)>] CreateEnvironmentResponse data, response status code and response headers
    def create_environment_with_http_info(create_environment_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.create_environment ...'
      end
      # verify the required parameter 'create_environment_request_body' is set
      if @api_client.config.client_side_validation && create_environment_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'create_environment_request_body' when calling AccountsApi.create_environment"
      end
      # resource path
      local_var_path = '/environments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_environment_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateEnvironmentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.create_environment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#create_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete api key
    # @param api_key_id [String] api_key_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [DeleteApiKeyResponse]
    def delete_api_key(api_key_id, opts = {})
      data, _status_code, _headers = delete_api_key_with_http_info(api_key_id, opts)
      data
    end

    # Delete api key
    # @param api_key_id [String] api_key_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(DeleteApiKeyResponse, Integer, Hash)>] DeleteApiKeyResponse data, response status code and response headers
    def delete_api_key_with_http_info(api_key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.delete_api_key ...'
      end
      # verify the required parameter 'api_key_id' is set
      if @api_client.config.client_side_validation && api_key_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_key_id' when calling AccountsApi.delete_api_key"
      end
      # resource path
      local_var_path = '/api-keys/{api_key_id}'.sub('{' + 'api_key_id' + '}', CGI.escape(api_key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteApiKeyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.delete_api_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#delete_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete environment
    # @param environment_id [String] environment_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [DeleteEnvironmentResponse]
    def delete_environment(environment_id, opts = {})
      data, _status_code, _headers = delete_environment_with_http_info(environment_id, opts)
      data
    end

    # Delete environment
    # @param environment_id [String] environment_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(DeleteEnvironmentResponse, Integer, Hash)>] DeleteEnvironmentResponse data, response status code and response headers
    def delete_environment_with_http_info(environment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.delete_environment ...'
      end
      # verify the required parameter 'environment_id' is set
      if @api_client.config.client_side_validation && environment_id.nil?
        fail ArgumentError, "Missing the required parameter 'environment_id' when calling AccountsApi.delete_environment"
      end
      # resource path
      local_var_path = '/environments/{environment_id}'.sub('{' + 'environment_id' + '}', CGI.escape(environment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteEnvironmentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.delete_environment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#delete_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get api key
    # @param api_key_id [String] api_key_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [GetApiKeyResponse]
    def get_api_key(api_key_id, opts = {})
      data, _status_code, _headers = get_api_key_with_http_info(api_key_id, opts)
      data
    end

    # Get api key
    # @param api_key_id [String] api_key_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(GetApiKeyResponse, Integer, Hash)>] GetApiKeyResponse data, response status code and response headers
    def get_api_key_with_http_info(api_key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_api_key ...'
      end
      # verify the required parameter 'api_key_id' is set
      if @api_client.config.client_side_validation && api_key_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_key_id' when calling AccountsApi.get_api_key"
      end
      # resource path
      local_var_path = '/api-keys/{api_key_id}'.sub('{' + 'api_key_id' + '}', CGI.escape(api_key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetApiKeyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.get_api_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get api request
    # @param api_request_id [String] api_request_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [GetApiRequestResponse]
    def get_api_request(api_request_id, opts = {})
      data, _status_code, _headers = get_api_request_with_http_info(api_request_id, opts)
      data
    end

    # Get api request
    # @param api_request_id [String] api_request_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(GetApiRequestResponse, Integer, Hash)>] GetApiRequestResponse data, response status code and response headers
    def get_api_request_with_http_info(api_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_api_request ...'
      end
      # verify the required parameter 'api_request_id' is set
      if @api_client.config.client_side_validation && api_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_request_id' when calling AccountsApi.get_api_request"
      end
      # resource path
      local_var_path = '/api-requests/{api_request_id}'.sub('{' + 'api_request_id' + '}', CGI.escape(api_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetApiRequestResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.get_api_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_api_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get environment
    # @param environment_id [String] environment_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [GetEnvironmentResponse]
    def get_environment(environment_id, opts = {})
      data, _status_code, _headers = get_environment_with_http_info(environment_id, opts)
      data
    end

    # Get environment
    # @param environment_id [String] environment_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(GetEnvironmentResponse, Integer, Hash)>] GetEnvironmentResponse data, response status code and response headers
    def get_environment_with_http_info(environment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.get_environment ...'
      end
      # verify the required parameter 'environment_id' is set
      if @api_client.config.client_side_validation && environment_id.nil?
        fail ArgumentError, "Missing the required parameter 'environment_id' when calling AccountsApi.get_environment"
      end
      # resource path
      local_var_path = '/environments/{environment_id}'.sub('{' + 'environment_id' + '}', CGI.escape(environment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEnvironmentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.get_environment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List api keys
    # @param require_environment [Boolean] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :environment_id 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @return [ListApiKeysResponse]
    def list_api_keys(require_environment, opts = {})
      data, _status_code, _headers = list_api_keys_with_http_info(require_environment, opts)
      data
    end

    # List api keys
    # @param require_environment [Boolean] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :environment_id 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @return [Array<(ListApiKeysResponse, Integer, Hash)>] ListApiKeysResponse data, response status code and response headers
    def list_api_keys_with_http_info(require_environment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.list_api_keys ...'
      end
      # verify the required parameter 'require_environment' is set
      if @api_client.config.client_side_validation && require_environment.nil?
        fail ArgumentError, "Missing the required parameter 'require_environment' when calling AccountsApi.list_api_keys"
      end
      # resource path
      local_var_path = '/api-keys'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'require_environment'] = require_environment
      query_params[:'environment_id'] = opts[:'environment_id'] if !opts[:'environment_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListApiKeysResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.list_api_keys",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#list_api_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List api requests
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :q 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @return [ListApiRequestsResponse]
    def list_api_requests(opts = {})
      data, _status_code, _headers = list_api_requests_with_http_info(opts)
      data
    end

    # List api requests
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :q 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @return [Array<(ListApiRequestsResponse, Integer, Hash)>] ListApiRequestsResponse data, response status code and response headers
    def list_api_requests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.list_api_requests ...'
      end
      # resource path
      local_var_path = '/api-requests'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListApiRequestsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.list_api_requests",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#list_api_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update api key
    # @param api_key_id [String] api_key_id
    # @param update_api_key_request_body [UpdateApiKeyRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [UpdateApiKeyResponse]
    def update_api_key(api_key_id, update_api_key_request_body, opts = {})
      data, _status_code, _headers = update_api_key_with_http_info(api_key_id, update_api_key_request_body, opts)
      data
    end

    # Update api key
    # @param api_key_id [String] api_key_id
    # @param update_api_key_request_body [UpdateApiKeyRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(UpdateApiKeyResponse, Integer, Hash)>] UpdateApiKeyResponse data, response status code and response headers
    def update_api_key_with_http_info(api_key_id, update_api_key_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.update_api_key ...'
      end
      # verify the required parameter 'api_key_id' is set
      if @api_client.config.client_side_validation && api_key_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_key_id' when calling AccountsApi.update_api_key"
      end
      # verify the required parameter 'update_api_key_request_body' is set
      if @api_client.config.client_side_validation && update_api_key_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'update_api_key_request_body' when calling AccountsApi.update_api_key"
      end
      # resource path
      local_var_path = '/api-keys/{api_key_id}'.sub('{' + 'api_key_id' + '}', CGI.escape(api_key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_api_key_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateApiKeyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.update_api_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#update_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update environment
    # @param environment_id [String] environment_id
    # @param update_environment_request_body [UpdateEnvironmentRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [UpdateEnvironmentResponse]
    def update_environment(environment_id, update_environment_request_body, opts = {})
      data, _status_code, _headers = update_environment_with_http_info(environment_id, update_environment_request_body, opts)
      data
    end

    # Update environment
    # @param environment_id [String] environment_id
    # @param update_environment_request_body [UpdateEnvironmentRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(UpdateEnvironmentResponse, Integer, Hash)>] UpdateEnvironmentResponse data, response status code and response headers
    def update_environment_with_http_info(environment_id, update_environment_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountsApi.update_environment ...'
      end
      # verify the required parameter 'environment_id' is set
      if @api_client.config.client_side_validation && environment_id.nil?
        fail ArgumentError, "Missing the required parameter 'environment_id' when calling AccountsApi.update_environment"
      end
      # verify the required parameter 'update_environment_request_body' is set
      if @api_client.config.client_side_validation && update_environment_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'update_environment_request_body' when calling AccountsApi.update_environment"
      end
      # resource path
      local_var_path = '/environments/{environment_id}'.sub('{' + 'environment_id' + '}', CGI.escape(environment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_environment_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateEnvironmentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"AccountsApi.update_environment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#update_environment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
