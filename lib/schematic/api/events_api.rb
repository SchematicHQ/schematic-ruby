=begin
#Schematic API

#Schematic API

The version of the OpenAPI document: 0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.6.0

=end

require 'cgi'

module Schematic
  class EventsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Count event types
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :q 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [CountEventTypesResponse]
    def count_event_types(opts = {})
      data, _status_code, _headers = count_event_types_with_http_info(opts)
      data
    end

    # Count event types
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :q 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [Array<(CountEventTypesResponse, Integer, Hash)>] CountEventTypesResponse data, response status code and response headers
    def count_event_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.count_event_types ...'
      end
      # resource path
      local_var_path = '/event-types/count'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'dir'] = opts[:'dir'] if !opts[:'dir'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CountEventTypesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"EventsApi.count_event_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#count_event_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Count events
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :company_id 
    # @option opts [String] :user_id 
    # @option opts [String] :feature_id 
    # @option opts [String] :event_subtype 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [CountEventsResponse]
    def count_events(opts = {})
      data, _status_code, _headers = count_events_with_http_info(opts)
      data
    end

    # Count events
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :company_id 
    # @option opts [String] :user_id 
    # @option opts [String] :feature_id 
    # @option opts [String] :event_subtype 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [Array<(CountEventsResponse, Integer, Hash)>] CountEventsResponse data, response status code and response headers
    def count_events_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.count_events ...'
      end
      # resource path
      local_var_path = '/events/count'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'company_id'] = opts[:'company_id'] if !opts[:'company_id'].nil?
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'feature_id'] = opts[:'feature_id'] if !opts[:'feature_id'].nil?
      query_params[:'event_subtype'] = opts[:'event_subtype'] if !opts[:'event_subtype'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'dir'] = opts[:'dir'] if !opts[:'dir'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CountEventsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"EventsApi.count_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#count_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create event
    # @param create_event_request_body [CreateEventRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [CreateEventResponse]
    def create_event(create_event_request_body, opts = {})
      data, _status_code, _headers = create_event_with_http_info(create_event_request_body, opts)
      data
    end

    # Create event
    # @param create_event_request_body [CreateEventRequestBody] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(CreateEventResponse, Integer, Hash)>] CreateEventResponse data, response status code and response headers
    def create_event_with_http_info(create_event_request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.create_event ...'
      end
      # verify the required parameter 'create_event_request_body' is set
      if @api_client.config.client_side_validation && create_event_request_body.nil?
        fail ArgumentError, "Missing the required parameter 'create_event_request_body' when calling EventsApi.create_event"
      end
      # resource path
      local_var_path = '/events'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_event_request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateEventResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"EventsApi.create_event",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#create_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get event
    # @param event_id [String] event_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [GetEventResponse]
    def get_event(event_id, opts = {})
      data, _status_code, _headers = get_event_with_http_info(event_id, opts)
      data
    end

    # Get event
    # @param event_id [String] event_id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(GetEventResponse, Integer, Hash)>] GetEventResponse data, response status code and response headers
    def get_event_with_http_info(event_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.get_event ...'
      end
      # verify the required parameter 'event_id' is set
      if @api_client.config.client_side_validation && event_id.nil?
        fail ArgumentError, "Missing the required parameter 'event_id' when calling EventsApi.get_event"
      end
      # resource path
      local_var_path = '/events/{event_id}'.sub('{' + 'event_id' + '}', CGI.escape(event_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEventResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"EventsApi.get_event",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#get_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get event type
    # @param key [String] key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [GetEventTypeResponse]
    def get_event_type(key, opts = {})
      data, _status_code, _headers = get_event_type_with_http_info(key, opts)
      data
    end

    # Get event type
    # @param key [String] key
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @return [Array<(GetEventTypeResponse, Integer, Hash)>] GetEventTypeResponse data, response status code and response headers
    def get_event_type_with_http_info(key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.get_event_type ...'
      end
      # verify the required parameter 'key' is set
      if @api_client.config.client_side_validation && key.nil?
        fail ArgumentError, "Missing the required parameter 'key' when calling EventsApi.get_event_type"
      end
      # resource path
      local_var_path = '/event-types/{key}'.sub('{' + 'key' + '}', CGI.escape(key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEventTypeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"EventsApi.get_event_type",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#get_event_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List event types
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :q 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [ListEventTypesResponse]
    def list_event_types(opts = {})
      data, _status_code, _headers = list_event_types_with_http_info(opts)
      data
    end

    # List event types
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :q 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [Array<(ListEventTypesResponse, Integer, Hash)>] ListEventTypesResponse data, response status code and response headers
    def list_event_types_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.list_event_types ...'
      end
      # resource path
      local_var_path = '/event-types'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = opts[:'q'] if !opts[:'q'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'dir'] = opts[:'dir'] if !opts[:'dir'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListEventTypesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"EventsApi.list_event_types",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#list_event_types\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List events
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :company_id 
    # @option opts [String] :user_id 
    # @option opts [String] :feature_id 
    # @option opts [String] :event_subtype 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [ListEventsResponse]
    def list_events(opts = {})
      data, _status_code, _headers = list_events_with_http_info(opts)
      data
    end

    # List events
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [String] :company_id 
    # @option opts [String] :user_id 
    # @option opts [String] :feature_id 
    # @option opts [String] :event_subtype 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [Array<(ListEventsResponse, Integer, Hash)>] ListEventsResponse data, response status code and response headers
    def list_events_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.list_events ...'
      end
      # resource path
      local_var_path = '/events'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'company_id'] = opts[:'company_id'] if !opts[:'company_id'].nil?
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'feature_id'] = opts[:'feature_id'] if !opts[:'feature_id'].nil?
      query_params[:'event_subtype'] = opts[:'event_subtype'] if !opts[:'event_subtype'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'dir'] = opts[:'dir'] if !opts[:'dir'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListEventsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"EventsApi.list_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#list_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List metric counts
    # @param event_subtype [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [Time] :start_time 
    # @option opts [Time] :end_time 
    # @option opts [String] :company_id 
    # @option opts [String] :user_id 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @option opts [String] :grouping 
    # @return [ListMetricCountsResponse]
    def list_metric_counts(event_subtype, opts = {})
      data, _status_code, _headers = list_metric_counts_with_http_info(event_subtype, opts)
      data
    end

    # List metric counts
    # @param event_subtype [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [Time] :start_time 
    # @option opts [Time] :end_time 
    # @option opts [String] :company_id 
    # @option opts [String] :user_id 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @option opts [String] :grouping 
    # @return [Array<(ListMetricCountsResponse, Integer, Hash)>] ListMetricCountsResponse data, response status code and response headers
    def list_metric_counts_with_http_info(event_subtype, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.list_metric_counts ...'
      end
      # verify the required parameter 'event_subtype' is set
      if @api_client.config.client_side_validation && event_subtype.nil?
        fail ArgumentError, "Missing the required parameter 'event_subtype' when calling EventsApi.list_metric_counts"
      end
      # resource path
      local_var_path = '/metric-counts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'event_subtype'] = event_subtype
      query_params[:'start_time'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'end_time'] = opts[:'end_time'] if !opts[:'end_time'].nil?
      query_params[:'company_id'] = opts[:'company_id'] if !opts[:'company_id'].nil?
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'dir'] = opts[:'dir'] if !opts[:'dir'].nil?
      query_params[:'grouping'] = opts[:'grouping'] if !opts[:'grouping'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListMetricCountsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"EventsApi.list_metric_counts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#list_metric_counts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List metric counts hourly
    # @param event_subtype [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [Time] :start_time 
    # @option opts [Time] :end_time 
    # @option opts [String] :company_id 
    # @option opts [String] :user_id 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [ListMetricCountsHourlyResponse]
    def list_metric_counts_hourly(event_subtype, opts = {})
      data, _status_code, _headers = list_metric_counts_hourly_with_http_info(event_subtype, opts)
      data
    end

    # List metric counts hourly
    # @param event_subtype [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_schematic_environment_id If the request is made using an API key that is not environment-scoped, specify the environment using this header
    # @option opts [Time] :start_time 
    # @option opts [Time] :end_time 
    # @option opts [String] :company_id 
    # @option opts [String] :user_id 
    # @option opts [Integer] :limit Page limit (default 100)
    # @option opts [Integer] :offset Page offset (default 0)
    # @option opts [String] :order Order by column
    # @option opts [String] :dir Order direction
    # @return [Array<(ListMetricCountsHourlyResponse, Integer, Hash)>] ListMetricCountsHourlyResponse data, response status code and response headers
    def list_metric_counts_hourly_with_http_info(event_subtype, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EventsApi.list_metric_counts_hourly ...'
      end
      # verify the required parameter 'event_subtype' is set
      if @api_client.config.client_side_validation && event_subtype.nil?
        fail ArgumentError, "Missing the required parameter 'event_subtype' when calling EventsApi.list_metric_counts_hourly"
      end
      # resource path
      local_var_path = '/metric-counts-hourly'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'event_subtype'] = event_subtype
      query_params[:'start_time'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'end_time'] = opts[:'end_time'] if !opts[:'end_time'].nil?
      query_params[:'company_id'] = opts[:'company_id'] if !opts[:'company_id'].nil?
      query_params[:'user_id'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'dir'] = opts[:'dir'] if !opts[:'dir'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Schematic-Environment-Id'] = opts[:'x_schematic_environment_id'] if !opts[:'x_schematic_environment_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListMetricCountsHourlyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :operation => :"EventsApi.list_metric_counts_hourly",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EventsApi#list_metric_counts_hourly\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
